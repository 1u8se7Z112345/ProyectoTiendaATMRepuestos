@page "/Detalle/{Id:int}"
@inject IToastService ToastService
@inject ICarritoProxy CarritoProxy
@inject HttpClient HttpClient

<div class="container px-4 px-lg-5">
    @if (Producto is not null)
    {
        <div class="row gx-4 align-items-center">
            <div class="col">
                @if (string.IsNullOrWhiteSpace(Producto.UrlImagen))
                {
                    <img src="assets/images/sinimagen.jpeg" class="card-img-top border-dark border-1 producto-card-wide" alt="@Producto.Nombre" />
                }
                else
                {
                    <img src="@Producto.UrlImagen" class="card-img-top border-dark border-1 producto-card-wide" alt="@Producto.Nombre" />
                }
            </div>
            <div class="col">
                <h1 class="display-5 fw-bolder">@Producto.Nombre</h1>
                <div class="fs-5 mb-5">
                    <span>S/ @Producto.Precio.ToString("N2")</span>
                    <span>@Producto.Marca</span>  
                 
                </div>
                <div class="d-flex">
                    <input type="number" class="form-control text-center me-3" min="1" style="width: 60px" @bind-value="Cantidad" />
                    <button class="btn btn-outline-dark flex-shrink-0 me-3" @onclick="() => AgregarCarrito(Producto)">
                        <i class="bi bi-cart-plus-fill me-1"></i>
                        Agregar al carrito
                    </button>
                    <NavLink class="btn btn-secondary" href=""><i class="bi bi-skip-backward-fill me-1"></i>Volver</NavLink>
                </div>
            </div>
        </div>
    }
</div>


@code {
    
    [Parameter]
    public int Id { get; set; }

    public ProductoDtoResponse? Producto { get; set; }

    public int Cantidad { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<ProductoDtoResponse>($"api/Productos/{Id}");
            if (response is not null)
            {
                Producto = response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }


    private async Task AgregarCarrito(ProductoDtoResponse producto)
    {
        var carrito = new CarritoDto()
        {
            ProductoDto = producto,
            Cantidad = Cantidad,
            Precio = producto.Precio,
            Total = Cantidad * producto.Precio
        };

        await CarritoProxy.AgregarCarrito(carrito);
    }
}
